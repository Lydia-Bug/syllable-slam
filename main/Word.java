package main;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * Support class containing methods to assist with syllable counting of words.
 */
public class Word {
    static ArrayList<String> vowels = new ArrayList<String>(Arrays.asList("a", "e", "i", "o", "u"));

    /**
     * TODO: refactor this method so that it appears more clean
     * 
     * Splits a given word into groups containing each 'group' of vowels,
     * and any consonants surrounding said group.
     * Consonants between two vowel groups will be duplicated into both groups.
     * 
     * @param word String of a single word with no whitespace
     * 
     * @return ArrayList of vowel groups split as described
     */
    public static ArrayList<String> splitWordIntoGroups(String word){

        ArrayList<int[]> vowelIndex = new ArrayList<int[]>();
        for(int i = 0; i < word.length(); i++){
            if(vowels.contains(Sub(word, i))){//current letter is vowel
                int j = i;
                while(vowels.contains(Sub(word, j)) && j != word.length()-1){
                    j++;
                }
                if(j == word.length()-1){
                    if(vowels.contains(Sub(word, j))){
                        vowelIndex.add(new int[]{i, j});
                    }else{
                        vowelIndex.add(new int[]{i, j-1}); 
                    }
                    break;
                }else{
                    vowelIndex.add(new int[]{i, j-1});
                    i = j-1;
                }
                
            }
            if(Sub(word, i).equals("y")){
                boolean surroundingConstants = false;
                if(i != 0){
                    if(vowels.contains(Sub(word, i-1))){
                        surroundingConstants = true;
                    }
                }
                if(i != word.length()-1){
                    if(vowels.contains(Sub(word, i+1))){
                        surroundingConstants = true;
                    }
                }
                if(!surroundingConstants){
                    vowelIndex.add(new int[]{i, i});
                }
            }
        }

        ArrayList<String> groups = new ArrayList<String>();
        for(int i = 0; i < vowelIndex.size(); i++){
            if(vowelIndex.size() == 1){
                groups.add(word);
            }else if(i == 0){
                groups.add(word.substring(0, vowelIndex.get(i+1)[0]));
            }else if(i == vowelIndex.size()-1){
                groups.add(word.substring(vowelIndex.get(i-1)[1]+1));
            }else{
                groups.add(word.substring(vowelIndex.get(i-1)[1]+1, vowelIndex.get(i+1)[0]));
            }
            
        }
        return groups;
    }

    /**
     * Method to get a String of a single character from a given string.
     * 
     * @param word input String
     * @param index char index
     * 
     * @return String of character at index
     */
    public static String Sub(String word, int index){
        return word.substring(index, index+1);
    }

    /**
     * Extracts the vowels from a consonant-vowel-consonant group string
     * as generated by splitWordIntoGroups.
     * 
     * @see splitWordIntoGroups
     * 
     * @param cvcGroup consonant-vowel-consonant string
     * 
     * @return String of the vowels within cvcGroup
     */
    public static String getVowelGroup(String cvcGroup){
        String vowelGroup = "";
            for(int i = 0; i < cvcGroup.length(); i++){
                if(vowels.contains(cvcGroup.substring(i, i+1))){
                    vowelGroup += cvcGroup.substring(i, i+1);
                }
            }
        return vowelGroup;
    }

}